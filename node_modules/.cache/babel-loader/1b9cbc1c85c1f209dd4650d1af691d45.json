{"ast":null,"code":"var _jsxFileName = \"/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty } from '../../../utils/validators';\nimport { isFormValid, handleInputChange, handleInputBlur } from '../../../utils/form-validation';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteModal from '../../common/DeleteModal/DeleteModal';\nimport { Modal } from 'bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Employees = ({\n  employee,\n  setEmployee,\n  employees\n}) => {\n  _s();\n\n  let navigate = useNavigate();\n  const deleteModalRef = useRef();\n  const [employeeToBeDeleted, setEmployeeToBeDeleted] = useState();\n  const [formData, setFormData] = useState({\n    employeeId: ''\n  });\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n  const references = {\n    employeeId: useRef()\n  };\n  const [formErrors, setFormErrors] = useState({\n    employeeId: ''\n  });\n  const messageTypes = Object.freeze({\n    success: `Az adatok sikeresen mentésre kerültek`,\n    fail: `Az adatok mentése sikertelen`\n  });\n  const formErrorTypes = Object.freeze({\n    required: `A mező kitöltése kötelező`\n  });\n  const validators = {\n    employeeId: {\n      required: isFieldEmpty\n    }\n  };\n\n  const handleModifyEmployee = e => {\n    e.preventDefault();\n    setAlert(null);\n    setFormErrors({\n      employeeId: ''\n    });\n    setFormWasValidated(false);\n    const isValid = isFormValid(formData, setFormErrors, validators, references, formErrorTypes);\n\n    if (isValid) {\n      let foundEmployee = employees.filter(employee => employee.employeeId === formData.employeeId)[0];\n      setEmployee(foundEmployee);\n      navigate(`/employees/edit/${formData.employeeId}`);\n    } else {\n      console.log('no input');\n      setFormWasValidated(false);\n    }\n  };\n\n  const handleDeleteConfirm = async () => {\n    let foundEmployee = employees.filter(employee => employee.employeeId === formData.employeeId)[0];\n    setEmployee(foundEmployee);\n  };\n\n  const handleDeleteOnClick = e => {\n    e.preventDefault();\n    setAlert(null);\n    setFormErrors({\n      employeeId: ''\n    });\n    setFormWasValidated(false);\n    const isValid = isFormValid(formData, setFormErrors, validators, references, formErrorTypes);\n\n    if (isValid) {\n      let foundEmployee = employees.filter(employee => employee.employeeId === formData.employeeId)[0];\n      setEmployee(foundEmployee);\n    } else {\n      console.log('no input');\n      setFormWasValidated(false);\n    } // setEmployeeToBeDeleted(e.target.dataset.id);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-sm mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dolgoz\\xF3k\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/employees/new\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-dark mt-5\",\n        children: \"L\\xE9trehoz\\xE1s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleModifyEmployee,\n      className: `needs-validation ${formWasValidated ? 'was-validated' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(InputFieldSet, {\n        name: \"employeeId\",\n        value: formData.employeeId,\n        type: \"select\",\n        employeeOptions: employees,\n        onChange: e => {\n          handleInputChange(e, formData, setFormData);\n        },\n        onBlur: e => {\n          handleInputBlur(e, formData, setFormErrors, validators, references, formErrorTypes);\n        },\n        reference: references.employeeId,\n        error: formErrors.employeeId,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-l mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => state.button = 1,\n          className: \"btn btn-warning mt-5\",\n          children: \"M\\xF3dos\\xEDt\\xE1s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => state.button = 2,\n          className: \"btn btn-danger mt-5\",\n          children: \"T\\xF6rl\\xE9s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Employees, \"Eyjqb8pbpaqA/meTJmQhdnIZnRo=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Employees;\nexport default Employees;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employees\");","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js"],"names":["React","useState","useRef","NavLink","InputFieldSet","isFieldEmpty","isFormValid","handleInputChange","handleInputBlur","useNavigate","DeleteModal","Modal","Employees","employee","setEmployee","employees","navigate","deleteModalRef","employeeToBeDeleted","setEmployeeToBeDeleted","formData","setFormData","employeeId","alert","setAlert","formWasValidated","setFormWasValidated","references","formErrors","setFormErrors","messageTypes","Object","freeze","success","fail","formErrorTypes","required","validators","handleModifyEmployee","e","preventDefault","isValid","foundEmployee","filter","console","log","handleDeleteConfirm","handleDeleteOnClick","state","button"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty } from '../../../utils/validators';\nimport {\n  isFormValid,\n  handleInputChange,\n  handleInputBlur,\n} from '../../../utils/form-validation';\nimport { useNavigate } from 'react-router-dom';\nimport DeleteModal from '../../common/DeleteModal/DeleteModal';\nimport { Modal } from 'bootstrap';\n\nconst Employees = ({ employee, setEmployee, employees }) => {\n  let navigate = useNavigate();\n  const deleteModalRef = useRef();\n  const [employeeToBeDeleted, setEmployeeToBeDeleted] = useState();\n\n  const [formData, setFormData] = useState({\n    employeeId: '',\n  });\n\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n\n  const references = {\n    employeeId: useRef(),\n  };\n\n  const [formErrors, setFormErrors] = useState({\n    employeeId: '',\n  });\n\n  const messageTypes = Object.freeze({\n    success: `Az adatok sikeresen mentésre kerültek`,\n    fail: `Az adatok mentése sikertelen`,\n  });\n\n  const formErrorTypes = Object.freeze({\n    required: `A mező kitöltése kötelező`,\n  });\n\n  const validators = {\n    employeeId: {\n      required: isFieldEmpty,\n    },\n  };\n\n  const handleModifyEmployee = e => {\n    e.preventDefault();\n    setAlert(null);\n    setFormErrors({\n      employeeId: '',\n    });\n    setFormWasValidated(false);\n    const isValid = isFormValid(\n      formData,\n      setFormErrors,\n      validators,\n      references,\n      formErrorTypes\n    );\n    if (isValid) {\n      let foundEmployee = employees.filter(\n        employee => employee.employeeId === formData.employeeId\n      )[0];\n      setEmployee(foundEmployee);\n      navigate(`/employees/edit/${formData.employeeId}`);\n    } else {\n      console.log('no input');\n      setFormWasValidated(false);\n    }\n  };\n\n  const handleDeleteConfirm = async () => {\n    let foundEmployee = employees.filter(\n      employee => employee.employeeId === formData.employeeId\n    )[0];\n    setEmployee(foundEmployee);\n  };\n\n  const handleDeleteOnClick = e => {\n    e.preventDefault();\n    setAlert(null);\n    setFormErrors({\n      employeeId: '',\n    });\n    setFormWasValidated(false);\n    const isValid = isFormValid(\n      formData,\n      setFormErrors,\n      validators,\n      references,\n      formErrorTypes\n    );\n    if (isValid) {\n      let foundEmployee = employees.filter(\n        employee => employee.employeeId === formData.employeeId\n      )[0];\n      setEmployee(foundEmployee);\n    } else {\n      console.log('no input');\n      setFormWasValidated(false);\n    }\n\n    // setEmployeeToBeDeleted(e.target.dataset.id);\n  };\n\n  return (\n    <div className='container-sm mt-5'>\n      <h1>Dolgozók</h1>\n      <NavLink to='/employees/new'>\n        <button type='button' className='btn btn-dark mt-5'>\n          Létrehozás\n        </button>\n      </NavLink>\n      <form\n        noValidate\n        onSubmit={handleModifyEmployee}\n        className={`needs-validation ${\n          formWasValidated ? 'was-validated' : ''\n        }`}\n      >\n        <InputFieldSet\n          name='employeeId'\n          value={formData.employeeId}\n          type='select'\n          employeeOptions={employees}\n          onChange={e => {\n            handleInputChange(e, formData, setFormData);\n          }}\n          onBlur={e => {\n            handleInputBlur(\n              e,\n              formData,\n              setFormErrors,\n              validators,\n              references,\n              formErrorTypes\n            );\n          }}\n          reference={references.employeeId}\n          error={formErrors.employeeId}\n          required\n        />\n        <div className='container-l mt-5'>\n          <button\n            type='submit'\n            onClick={() => (state.button = 1)}\n            className='btn btn-warning mt-5'\n          >\n            Módosítás\n          </button>\n          <button\n            type='button'\n            onClick={() => (state.button = 2)}\n            className='btn btn-danger mt-5'\n          >\n            Törlés\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Employees;\n"]},"metadata":{},"sourceType":"module"}