{"ast":null,"code":"var _jsxFileName = \"/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty } from '../../../utils/validators';\nimport { isFormValid, handleInputChange, handleInputBlur } from '../../../utils/form-validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Employees = ({\n  employees\n}) => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    employeeId: ''\n  });\n  console.log('formData', formData);\n  console.log('employees', employees);\n\n  const getSelectedEmployee = id => {\n    if (id !== '') {\n      const selectedEmployeeDetails = employees.filter(employee => employee.employeeId === id);\n      setSelectedEmployee(selectedEmployeeDetails);\n    }\n  };\n\n  const [selectedEmployee, setSelectedEmployee] = useState();\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n  const references = {\n    employeeId: useRef()\n  };\n  const [formErrors, setFormErrors] = useState({\n    employeeId: ''\n  });\n  const messageTypes = Object.freeze({\n    success: `Az adatok sikeresen mentésre kerültek`,\n    fail: `Az adatok mentése sikertelen`\n  });\n  const formErrorTypes = Object.freeze({\n    required: `A mező kitöltése kötelező`\n  });\n  const validators = {\n    employeeId: {\n      required: isFieldEmpty\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setAlert(null);\n    setFormErrors({\n      employee: ''\n    });\n    setFormWasValidated(false);\n    const isValid = isFormValid(formData, setFormErrors, validators, references, formErrorTypes);\n\n    if (isValid) {\n      getSelectedEmployee(formData.employeeId);\n      console.log('isValid');\n      console.log(formData.employeeId);\n    } else {\n      console.log('false'); // setFormWasValidated(false);\n    }\n  };\n\n  const handleModifyEmployee = id => {\n    console.log(id);\n    const employeeToEdit = employees.filter(employee => employee.employeeId === id);\n    console.log('employeeToEdit', employeeToEdit);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-sm mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dolgoz\\xF3k\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      exact: true,\n      to: \"/employees/new\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-dark mt-5\",\n        children: \"L\\xE9trehoz\\xE1s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleSubmit // className={`needs-validation ${formWasValidated && 'was-validated'}`}\n      ,\n      className: `needs-validation ${formWasValidated ? 'was-validated' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(InputFieldSet, {\n        name: \"employeeId\",\n        value: formData.employeeId,\n        type: \"select\",\n        employeeOptions: employees,\n        onChange: e => {\n          handleInputChange(e, formData, setFormData);\n        },\n        onBlur: e => {\n          handleInputBlur(e, formData, setFormErrors, validators, references, formErrorTypes);\n        },\n        reference: references.employeeId,\n        error: formErrors.employeeId,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-l mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-warning mt-5\",\n          onClick: () => handleModifyEmployee(id),\n          children: \"M\\xF3dos\\xEDt\\xE1s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger mt-5\",\n          children: \"T\\xF6rl\\xE9s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Employees, \"rABpGw/WycSCBKHYUbsoxKarerc=\");\n\n_c = Employees;\nexport default Employees;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employees\");","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js"],"names":["React","useState","useRef","useEffect","NavLink","InputFieldSet","isFieldEmpty","isFormValid","handleInputChange","handleInputBlur","Employees","employees","formData","setFormData","employeeId","console","log","getSelectedEmployee","id","selectedEmployeeDetails","filter","employee","setSelectedEmployee","selectedEmployee","alert","setAlert","formWasValidated","setFormWasValidated","references","formErrors","setFormErrors","messageTypes","Object","freeze","success","fail","formErrorTypes","required","validators","handleSubmit","e","preventDefault","isValid","handleModifyEmployee","employeeToEdit"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty } from '../../../utils/validators';\nimport {\n  isFormValid,\n  handleInputChange,\n  handleInputBlur,\n} from '../../../utils/form-validation';\n\nconst Employees = ({ employees }) => {\n  const [formData, setFormData] = useState({\n    employeeId: '',\n  });\n  console.log('formData', formData);\n  console.log('employees', employees);\n\nconst getSelectedEmployee = (id) => {\n  if (id !== '') {\n    const selectedEmployeeDetails = employees.filter(employee => employee.employeeId === id)\n    setSelectedEmployee(selectedEmployeeDetails)\n  }\n}\n\nconst [selectedEmployee, setSelectedEmployee] = useState()\n\nconst [alert, setAlert] = useState(null);\nconst [formWasValidated, setFormWasValidated] = useState(false);\n\nconst references = {\n  employeeId: useRef(),\n};\n\nconst [formErrors, setFormErrors] = useState({\n  employeeId: '',\n});\n\nconst messageTypes = Object.freeze({\n  success: `Az adatok sikeresen mentésre kerültek`,\n  fail: `Az adatok mentése sikertelen`,\n});\n\nconst formErrorTypes = Object.freeze({\n  required: `A mező kitöltése kötelező`,\n});\n\nconst validators = {\n  employeeId: {\n    required: isFieldEmpty,\n  },\n};\n\nconst handleSubmit = e => {\n  e.preventDefault();\n  setAlert(null);\n  setFormErrors({\n    employee: '',\n  });\n  setFormWasValidated(false);\n  const isValid = isFormValid(\n    formData,\n    setFormErrors,\n    validators,\n    references,\n    formErrorTypes\n  );\n  if (isValid) {\n    getSelectedEmployee(formData.employeeId)\n    console.log('isValid');\n    console.log(formData.employeeId);\n  } else {\n    console.log('false');\n    // setFormWasValidated(false);\n  }\n};\n\nconst handleModifyEmployee = id => {\n  console.log(id);\n\n  const employeeToEdit = employees.filter(\n    employee => employee.employeeId === id\n  );\n  console.log('employeeToEdit', employeeToEdit);\n};\n\n  \nreturn (\n  <div className='container-sm mt-5'>\n    <h1>Dolgozók</h1>\n    <NavLink exact to='/employees/new'>\n      <button type='button' className='btn btn-dark mt-5'>\n        Létrehozás\n      </button>{' '}\n    </NavLink>\n    <form\n      noValidate\n      onSubmit={handleSubmit}\n      // className={`needs-validation ${formWasValidated && 'was-validated'}`}\n\n      className={`needs-validation ${\n        formWasValidated ? 'was-validated' : ''\n      }`}\n    >\n      <InputFieldSet\n        name='employeeId'\n        value={formData.employeeId}\n        type='select'\n        employeeOptions={employees}\n        onChange={e => {\n          handleInputChange(e, formData, setFormData);\n        }}\n        onBlur={e => {\n          handleInputBlur(\n            e,\n            formData,\n            setFormErrors,\n            validators,\n            references,\n            formErrorTypes\n          );\n        }}\n        reference={references.employeeId}\n        error={formErrors.employeeId}\n        required\n      />\n      <div className='container-l mt-5'>\n        {/* <NavLink to={`/employees/edit/${selectedEmployee[0].employeeId}`}> */}\n        <button\n          type='submit'\n          className='btn btn-warning mt-5'\n          onClick={() => handleModifyEmployee(id)}\n        >\n          Módosítás\n        </button>\n        {/* </NavLink> */}\n        <button type='button' className='btn btn-danger mt-5'>\n          Törlés\n        </button>\n      </div>\n    </form>\n  </div>\n);\n};\n\nexport default Employees;\n"]},"metadata":{},"sourceType":"module"}