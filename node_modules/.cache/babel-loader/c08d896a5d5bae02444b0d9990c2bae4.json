{"ast":null,"code":"var _jsxFileName = \"/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/NewEmployee/NewEmployee.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputField from '../../common/InputField/InputField';\nimport { isFieldEmpty, isIdFormatValid } from '../../../utils/validators';\nimport { isFormValid, handleInputChange, handleInputBlur } from '../../../utils/form-validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewEmployee = () => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    employeeId: '',\n    employeeName: ''\n  });\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n  const references = {\n    employeeId: useRef(),\n    employeeName: useRef()\n  };\n  const formErrorTypes = Object.freeze({\n    required: `A mez≈ë kit√∂lt√©se k√∂telez≈ë`,\n    employeeIdFormat: `Az azonos√≠t√≥ nem megfelel≈ë form√°tum√∫ (2 kis - vagy nagybet≈± √©s 4 sz√°m)`\n  });\n  const [formErrors, setFormErrors] = useState({\n    employeeId: '',\n    employeeName: ''\n  });\n  const messageTypes = Object.freeze({\n    failCaptcha: `Please prove me that you're not a robot ü§ñ`\n  });\n  const validators = {\n    employeeId: {\n      required: isFieldEmpty,\n      employeeIdFormat: isIdFormatValid\n    },\n    employeeName: {\n      required: isFieldEmpty\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-sm mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\xDAj dolgoz\\xF3 hozz\\xE1ad\\xE1sa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true // onSubmit={handleLogin}\n      ,\n      className: `needs-validation ${formWasValidated && 'was-validated'}`,\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        placeholder: \"pl: ab1234\",\n        name: \"employeeId\",\n        value: formData.employeeId,\n        labelText: \"Azonos\\xEDt\\xF3 *\",\n        onChange: e => {\n          handleInputChange(e, formData, setFormData);\n        },\n        onBlur: e => {\n          handleInputBlur(e, formData, setFormErrors, validators, references, formErrorTypes);\n        },\n        reference: references.employeeId,\n        error: formErrors.employeeId,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        name: \"employeeName\",\n        value: formData.employeeName,\n        labelText: \"N\\xE9v *\",\n        onChange: e => {\n          handleInputChange(e, formData, setFormData);\n        },\n        onBlur: e => {\n          handleInputBlur(e, formData, setFormErrors, validators, references, formErrorTypes);\n        },\n        reference: references.employeeName,\n        error: formErrors.employeeName,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          class: \"btn btn-warning mt-5\",\n          children: \"Ment\\xE9s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), ' ', /*#__PURE__*/_jsxDEV(NavLink, {\n          exact: true,\n          to: \"/employees\",\n          activeClassName: \"activeClicked\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn btn-dark mt-5\",\n            children: \"M\\xE9gsem\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewEmployee, \"04+KWYaM1JHGrQzUQ2TUYF9Xq5Q=\");\n\n_c = NewEmployee;\nexport default NewEmployee;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewEmployee\");","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/NewEmployee/NewEmployee.js"],"names":["React","useState","useRef","NavLink","InputField","isFieldEmpty","isIdFormatValid","isFormValid","handleInputChange","handleInputBlur","NewEmployee","formData","setFormData","employeeId","employeeName","alert","setAlert","formWasValidated","setFormWasValidated","references","formErrorTypes","Object","freeze","required","employeeIdFormat","formErrors","setFormErrors","messageTypes","failCaptcha","validators","e"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputField from '../../common/InputField/InputField';\nimport { isFieldEmpty, isIdFormatValid } from '../../../utils/validators';\nimport {\n  isFormValid,\n  handleInputChange,\n  handleInputBlur,\n} from '../../../utils/form-validation';\n\nconst NewEmployee = () => {\n  const [formData, setFormData] = useState({\n    employeeId: '',\n    employeeName: '',\n  });\n\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n\n  const references = {\n    employeeId: useRef(),\n    employeeName: useRef(),\n  };\n\n  const formErrorTypes = Object.freeze({\n    required: `A mez≈ë kit√∂lt√©se k√∂telez≈ë`,\n    employeeIdFormat: `Az azonos√≠t√≥ nem megfelel≈ë form√°tum√∫ (2 kis - vagy nagybet≈± √©s 4 sz√°m)`,\n  });\n\n  const [formErrors, setFormErrors] = useState({\n    employeeId: '',\n    employeeName: '',\n  });\n\n  const messageTypes = Object.freeze({\n    failCaptcha: `Please prove me that you're not a robot ü§ñ`,\n  });\n\n  const validators = {\n    employeeId: {\n      required: isFieldEmpty,\n      employeeIdFormat: isIdFormatValid,\n    },\n    employeeName: {\n      required: isFieldEmpty,\n    },\n  };\n\n  return (\n    <div className='container-sm mt-5'>\n      <h1>√öj dolgoz√≥ hozz√°ad√°sa</h1>\n      <form\n        noValidate\n        // onSubmit={handleLogin}\n        className={`needs-validation ${formWasValidated && 'was-validated'}`}\n      >\n        <InputField\n          placeholder='pl: ab1234'\n          name='employeeId'\n          value={formData.employeeId}\n          labelText='Azonos√≠t√≥ *'\n          onChange={e => {\n            handleInputChange(e, formData, setFormData);\n          }}\n          onBlur={e => {\n            handleInputBlur(\n              e,\n              formData,\n              setFormErrors,\n              validators,\n              references,\n              formErrorTypes\n            );\n          }}\n          reference={references.employeeId}\n          error={formErrors.employeeId}\n          required\n        />\n        <InputField\n          name='employeeName'\n          value={formData.employeeName}\n          labelText='N√©v *'\n          onChange={e => {\n            handleInputChange(e, formData, setFormData);\n          }}\n          onBlur={e => {\n            handleInputBlur(\n              e,\n              formData,\n              setFormErrors,\n              validators,\n              references,\n              formErrorTypes\n            );\n          }}\n          reference={references.employeeName}\n          error={formErrors.employeeName}\n          required\n        />\n        <div className='container-sm'>\n          <button type='button' class='btn btn-warning mt-5'>\n            Ment√©s\n          </button>{' '}\n          <NavLink exact to='/employees' activeClassName='activeClicked'>\n            <button type='button' class='btn btn-dark mt-5'>\n              M√©gsem\n            </button>{' '}\n          </NavLink>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default NewEmployee;\n"]},"metadata":{},"sourceType":"module"}