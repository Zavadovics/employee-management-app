{"ast":null,"code":"var _jsxFileName = \"/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty } from '../../../utils/validators';\nimport { isFormValid, handleInputChange, handleInputBlur } from '../../../utils/form-validation';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Employees = ({\n  employees\n}) => {\n  _s();\n\n  let navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    employeeId: ''\n  }); // console.log('formData', formData);\n  // console.log('employees', employees);\n  // const getSelectedEmployee = (id) => {\n  //   if (id !== '') {\n  //     const selectedEmployeeDetails = employees.filter(employee => employee.employeeId === id)\n  //     setSelectedEmployee(selectedEmployeeDetails)\n  //   }\n  // }\n\n  const [selectedEmployee, setSelectedEmployee] = useState();\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n  const references = {\n    employeeId: useRef()\n  };\n  const [formErrors, setFormErrors] = useState({\n    employeeId: ''\n  });\n  const messageTypes = Object.freeze({\n    success: `Az adatok sikeresen mentésre kerültek`,\n    fail: `Az adatok mentése sikertelen`\n  });\n  const formErrorTypes = Object.freeze({\n    required: `A mező kitöltése kötelező`\n  });\n  const validators = {\n    employeeId: {\n      required: isFieldEmpty\n    }\n  };\n\n  const handleModifyEmployee = e => {\n    e.preventDefault();\n    setAlert(null);\n    setFormErrors({\n      employeeId: ''\n    });\n    setFormWasValidated(false);\n    const isValid = isFormValid(formData, setFormErrors, validators, references, formErrorTypes);\n\n    if (isValid) {\n      const employeeToEdit = employees.filter(employee => employee.employeeId === formData.employeeId);\n      console.log('isValid');\n      console.log('employeeToEdit', employeeToEdit);\n    } else {\n      console.log('false'); // setFormWasValidated(false);\n    }\n  }; // const handleModifyEmployee = id => {\n  //   console.log(id);\n  //   const employeeToEdit = employees.filter(\n  //     employee => employee.employeeId === id\n  //   );\n  //   console.log('employeeToEdit', employeeToEdit);\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-sm mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dolgoz\\xF3k\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      exact: true,\n      to: \"/employees/new\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-dark mt-5\",\n        children: \"L\\xE9trehoz\\xE1s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleModifyEmployee // className={`needs-validation ${formWasValidated && 'was-validated'}`}\n      ,\n      className: `needs-validation ${formWasValidated ? 'was-validated' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(InputFieldSet, {\n        name: \"employeeId\",\n        value: formData.employeeId,\n        type: \"select\",\n        employeeOptions: employees,\n        onChange: e => {\n          handleInputChange(e, formData, setFormData);\n        },\n        onBlur: e => {\n          handleInputBlur(e, formData, setFormErrors, validators, references, formErrorTypes);\n        },\n        reference: references.employeeId,\n        error: formErrors.employeeId,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-l mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-warning mt-5\",\n          children: \"M\\xF3dos\\xEDt\\xE1s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger mt-5\",\n          children: \"T\\xF6rl\\xE9s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Employees, \"UtWF2NBN5/Z0sVg8MQ2eNUYa8Bc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Employees;\nexport default Employees;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employees\");","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js"],"names":["React","useState","useRef","useEffect","NavLink","InputFieldSet","isFieldEmpty","isFormValid","handleInputChange","handleInputBlur","useNavigate","Employees","employees","navigate","formData","setFormData","employeeId","selectedEmployee","setSelectedEmployee","alert","setAlert","formWasValidated","setFormWasValidated","references","formErrors","setFormErrors","messageTypes","Object","freeze","success","fail","formErrorTypes","required","validators","handleModifyEmployee","e","preventDefault","isValid","employeeToEdit","filter","employee","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty } from '../../../utils/validators';\nimport {\n  isFormValid,\n  handleInputChange,\n  handleInputBlur,\n} from '../../../utils/form-validation';\nimport { useNavigate } from 'react-router-dom';\n\nconst Employees = ({ employees }) => {\n  let navigate = useNavigate();\n\n  const [formData, setFormData] = useState({\n    employeeId: '',\n  });\n  // console.log('formData', formData);\n  // console.log('employees', employees);\n\n// const getSelectedEmployee = (id) => {\n//   if (id !== '') {\n//     const selectedEmployeeDetails = employees.filter(employee => employee.employeeId === id)\n//     setSelectedEmployee(selectedEmployeeDetails)\n//   }\n// }\n\nconst [selectedEmployee, setSelectedEmployee] = useState()\n\nconst [alert, setAlert] = useState(null);\nconst [formWasValidated, setFormWasValidated] = useState(false);\n\nconst references = {\n  employeeId: useRef(),\n};\n\nconst [formErrors, setFormErrors] = useState({\n  employeeId: '',\n});\n\nconst messageTypes = Object.freeze({\n  success: `Az adatok sikeresen mentésre kerültek`,\n  fail: `Az adatok mentése sikertelen`,\n});\n\nconst formErrorTypes = Object.freeze({\n  required: `A mező kitöltése kötelező`,\n});\n\nconst validators = {\n  employeeId: {\n    required: isFieldEmpty,\n  },\n};\n\nconst handleModifyEmployee = e => {\n  e.preventDefault();\n  setAlert(null);\n  setFormErrors({\n    employeeId: '',\n  });\n  setFormWasValidated(false);\n  const isValid = isFormValid(\n    formData,\n    setFormErrors,\n    validators,\n    references,\n    formErrorTypes\n  );\n  if (isValid) {\n    const employeeToEdit = employees.filter(\n    employee => employee.employeeId === formData.employeeId\n  );\n    console.log('isValid');\n    console.log('employeeToEdit', employeeToEdit);\n  } else {\n    console.log('false');\n    // setFormWasValidated(false);\n  }\n};\n\n// const handleModifyEmployee = id => {\n//   console.log(id);\n\n//   const employeeToEdit = employees.filter(\n//     employee => employee.employeeId === id\n//   );\n//   console.log('employeeToEdit', employeeToEdit);\n// };\n\n  \nreturn (\n  <div className='container-sm mt-5'>\n    <h1>Dolgozók</h1>\n    <NavLink exact to='/employees/new'>\n      <button type='button' className='btn btn-dark mt-5'>\n        Létrehozás\n      </button>{' '}\n    </NavLink>\n    <form\n      noValidate\n      onSubmit={handleModifyEmployee}\n      // className={`needs-validation ${formWasValidated && 'was-validated'}`}\n      className={`needs-validation ${\n        formWasValidated ? 'was-validated' : ''\n      }`}\n    >\n      <InputFieldSet\n        name='employeeId'\n        value={formData.employeeId}\n        type='select'\n        employeeOptions={employees}\n        onChange={e => {\n          handleInputChange(e, formData, setFormData);\n        }}\n        onBlur={e => {\n          handleInputBlur(\n            e,\n            formData,\n            setFormErrors,\n            validators,\n            references,\n            formErrorTypes\n          );\n        }}\n        reference={references.employeeId}\n        error={formErrors.employeeId}\n        required\n      />\n      <div className='container-l mt-5'>\n        {/* <NavLink to={`/employees/edit/${selectedEmployee[0].employeeId}`}> */}\n        <button\n          type='submit'\n          className='btn btn-warning mt-5'\n        >\n          Módosítás\n        </button>\n        {/* </NavLink> */}\n        <button type='button' className='btn btn-danger mt-5'>\n          Törlés\n        </button>\n      </div>\n    </form>\n  </div>\n);\n};\n\nexport default Employees;\n"]},"metadata":{},"sourceType":"module"}