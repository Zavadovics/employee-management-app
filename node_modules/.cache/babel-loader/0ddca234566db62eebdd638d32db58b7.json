{"ast":null,"code":"export const validateField = (fieldName, formData, setFormErrors, validators, references, formErrorTypes) => {\n  const value = formData[fieldName];\n  let isValid = true;\n  setFormErrors(prev => ({ ...prev,\n    [fieldName]: ''\n  }));\n\n  if (validators[fieldName] !== undefined) {\n    for (const [validationType, validatorFn] of Object.entries(validators[fieldName])) {\n      if (isValid) {\n        isValid = validatorFn(value);\n\n        if (!isValid) {\n          const errorText = formErrorTypes[validationType];\n          setFormErrors(prev => ({ ...prev,\n            [fieldName]: errorText\n          }));\n          references[fieldName].current.setCustomValidity(errorText);\n        }\n      }\n    }\n  }\n\n  return isValid;\n};\nexport const isFormValid = (formData, setFormErrors, validators, references, formErrorTypes) => {\n  let isValid = true;\n\n  for (const fieldName of Object.keys(formData)) {\n    const isFieldValid = validateField(fieldName, formData, setFormErrors, validators, references, formErrorTypes);\n\n    if (!isFieldValid) {\n      isValid = false;\n    }\n  }\n\n  return isValid;\n};\nexport const handleInputChange = (e, formData, setFormData) => {\n  const {\n    name,\n    value\n  } = e.target;\n  e.target.setCustomValidity('');\n  console.log(value);\n  setFormData({ ...formData,\n    [name]: value\n  });\n};\nexport const onTickChange = setVerified => {\n  setVerified(true);\n};\nexport const handleInputBlur = (e, formData, setFormErrors, validators, references, formErrorTypes) => {\n  const {\n    name\n  } = e.target;\n  validateField(name, formData, setFormErrors, validators, references, formErrorTypes);\n};","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/utils/form-validation.js"],"names":["validateField","fieldName","formData","setFormErrors","validators","references","formErrorTypes","value","isValid","prev","undefined","validationType","validatorFn","Object","entries","errorText","current","setCustomValidity","isFormValid","keys","isFieldValid","handleInputChange","e","setFormData","name","target","console","log","onTickChange","setVerified","handleInputBlur"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAC3BC,SAD2B,EAE3BC,QAF2B,EAG3BC,aAH2B,EAI3BC,UAJ2B,EAK3BC,UAL2B,EAM3BC,cAN2B,KAOxB;AACH,QAAMC,KAAK,GAAGL,QAAQ,CAACD,SAAD,CAAtB;AACA,MAAIO,OAAO,GAAG,IAAd;AACAL,EAAAA,aAAa,CAACM,IAAI,KAAK,EACrB,GAAGA,IADkB;AAErB,KAACR,SAAD,GAAa;AAFQ,GAAL,CAAL,CAAb;;AAKA,MAAIG,UAAU,CAACH,SAAD,CAAV,KAA0BS,SAA9B,EAAyC;AACvC,SAAK,MAAM,CAACC,cAAD,EAAiBC,WAAjB,CAAX,IAA4CC,MAAM,CAACC,OAAP,CAC1CV,UAAU,CAACH,SAAD,CADgC,CAA5C,EAEG;AACD,UAAIO,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAGI,WAAW,CAACL,KAAD,CAArB;;AACA,YAAI,CAACC,OAAL,EAAc;AACZ,gBAAMO,SAAS,GAAGT,cAAc,CAACK,cAAD,CAAhC;AACAR,UAAAA,aAAa,CAACM,IAAI,KAAK,EACrB,GAAGA,IADkB;AAErB,aAACR,SAAD,GAAac;AAFQ,WAAL,CAAL,CAAb;AAIAV,UAAAA,UAAU,CAACJ,SAAD,CAAV,CAAsBe,OAAtB,CAA8BC,iBAA9B,CAAgDF,SAAhD;AACD;AACF;AACF;AACF;;AACD,SAAOP,OAAP;AACD,CAjCM;AAmCP,OAAO,MAAMU,WAAW,GAAG,CACzBhB,QADyB,EAEzBC,aAFyB,EAGzBC,UAHyB,EAIzBC,UAJyB,EAKzBC,cALyB,KAMtB;AACH,MAAIE,OAAO,GAAG,IAAd;;AACA,OAAK,MAAMP,SAAX,IAAwBY,MAAM,CAACM,IAAP,CAAYjB,QAAZ,CAAxB,EAA+C;AAC7C,UAAMkB,YAAY,GAAGpB,aAAa,CAChCC,SADgC,EAEhCC,QAFgC,EAGhCC,aAHgC,EAIhCC,UAJgC,EAKhCC,UALgC,EAMhCC,cANgC,CAAlC;;AAQA,QAAI,CAACc,YAAL,EAAmB;AACjBZ,MAAAA,OAAO,GAAG,KAAV;AACD;AACF;;AACD,SAAOA,OAAP;AACD,CAtBM;AAwBP,OAAO,MAAMa,iBAAiB,GAAG,CAACC,CAAD,EAAIpB,QAAJ,EAAcqB,WAAd,KAA8B;AAC7D,QAAM;AAAEC,IAAAA,IAAF;AAAQjB,IAAAA;AAAR,MAAkBe,CAAC,CAACG,MAA1B;AAEAH,EAAAA,CAAC,CAACG,MAAF,CAASR,iBAAT,CAA2B,EAA3B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAZ;AACAgB,EAAAA,WAAW,CAAC,EACV,GAAGrB,QADO;AAEV,KAACsB,IAAD,GAAQjB;AAFE,GAAD,CAAX;AAID,CATM;AAWP,OAAO,MAAMqB,YAAY,GAAGC,WAAW,IAAI;AACzCA,EAAAA,WAAW,CAAC,IAAD,CAAX;AACD,CAFM;AAIP,OAAO,MAAMC,eAAe,GAAG,CAC7BR,CAD6B,EAE7BpB,QAF6B,EAG7BC,aAH6B,EAI7BC,UAJ6B,EAK7BC,UAL6B,EAM7BC,cAN6B,KAO1B;AACH,QAAM;AAAEkB,IAAAA;AAAF,MAAWF,CAAC,CAACG,MAAnB;AACAzB,EAAAA,aAAa,CACXwB,IADW,EAEXtB,QAFW,EAGXC,aAHW,EAIXC,UAJW,EAKXC,UALW,EAMXC,cANW,CAAb;AAQD,CAjBM","sourcesContent":["export const validateField = (\n  fieldName,\n  formData,\n  setFormErrors,\n  validators,\n  references,\n  formErrorTypes\n) => {\n  const value = formData[fieldName];\n  let isValid = true;\n  setFormErrors(prev => ({\n    ...prev,\n    [fieldName]: '',\n  }));\n\n  if (validators[fieldName] !== undefined) {\n    for (const [validationType, validatorFn] of Object.entries(\n      validators[fieldName]\n    )) {\n      if (isValid) {\n        isValid = validatorFn(value);\n        if (!isValid) {\n          const errorText = formErrorTypes[validationType];\n          setFormErrors(prev => ({\n            ...prev,\n            [fieldName]: errorText,\n          }));\n          references[fieldName].current.setCustomValidity(errorText);\n        }\n      }\n    }\n  }\n  return isValid;\n};\n\nexport const isFormValid = (\n  formData,\n  setFormErrors,\n  validators,\n  references,\n  formErrorTypes\n) => {\n  let isValid = true;\n  for (const fieldName of Object.keys(formData)) {\n    const isFieldValid = validateField(\n      fieldName,\n      formData,\n      setFormErrors,\n      validators,\n      references,\n      formErrorTypes\n    );\n    if (!isFieldValid) {\n      isValid = false;\n    }\n  }\n  return isValid;\n};\n\nexport const handleInputChange = (e, formData, setFormData) => {\n  const { name, value } = e.target;\n\n  e.target.setCustomValidity('');\n  console.log(value);\n  setFormData({\n    ...formData,\n    [name]: value,\n  });\n};\n\nexport const onTickChange = setVerified => {\n  setVerified(true);\n};\n\nexport const handleInputBlur = (\n  e,\n  formData,\n  setFormErrors,\n  validators,\n  references,\n  formErrorTypes\n) => {\n  const { name } = e.target;\n  validateField(\n    name,\n    formData,\n    setFormErrors,\n    validators,\n    references,\n    formErrorTypes\n  );\n};\n"]},"metadata":{},"sourceType":"module"}