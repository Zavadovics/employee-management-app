{"ast":null,"code":"var _jsxFileName = \"/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/NewDepartment/NewDepartment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputField from '../../common/InputField/InputField';\nimport { isFieldEmpty, isEmailInvalid // isDepartmentIdValid,\n} from '../../../utils/validators';\nimport { isFormValid, handleInputChange, handleInputBlur } from '../../../utils/form-validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewDepartment = () => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    departmentId: '',\n    departmentName: ''\n  });\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n  const references = {\n    email: useRef(),\n    departmentId: useRef()\n  };\n  const formErrorTypes = Object.freeze({\n    required: `K√©rlek √≠rd ide az √°√©ltalad v√°lasztott √∫j azonos√≠t√≥dat`,\n    departmentIdLength: `The departmentIds needs to be at least 8 characters long`,\n    validEmail: `E-mail is not the right format`\n  });\n  const [formErrors, setFormErrors] = useState({\n    email: '',\n    departmentId: ''\n  });\n  const messageTypes = Object.freeze({\n    failCaptcha: `Please prove me that you're not a robot ü§ñ`\n  });\n  const validators = {\n    email: {\n      required: isFieldEmpty,\n      validEmail: isEmailInvalid\n    },\n    departmentId: {\n      required: isFieldEmpty // departmentIsdLength: isdepartmentIdValid,\n\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-sm mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\xDAj szervezeti egys\\xE9g hozz\\xE1ad\\xE1sa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      className: \"navbar-item nav-link\",\n      exact: true,\n      to: \"/departments\",\n      activeClassName: \"activeClicked\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        class: \"btn btn-dark mt-5\",\n        children: \"Vissza\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true // onSubmit={handleLogin}\n      ,\n      className: `needs-validation ${formWasValidated && 'was-validated'}`,\n      children: /*#__PURE__*/_jsxDEV(InputField, {\n        name: \"departmentId\",\n        value: formData.departmentId,\n        labelText: \"Azonos\\xEDt\\xF3 *\",\n        onChange: e => {\n          handleInputChange(e, formData, setFormData);\n        },\n        onBlur: e => {\n          handleInputBlur(e, formData, setFormErrors, validators, references, formErrorTypes);\n        },\n        reference: references.departmentId,\n        error: formErrors.departmentId,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewDepartment, \"IP4oblDb6pyJqaJ9N1iMt7noOaU=\");\n\n_c = NewDepartment;\nexport default NewDepartment;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewDepartment\");","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/NewDepartment/NewDepartment.js"],"names":["React","useState","useRef","NavLink","InputField","isFieldEmpty","isEmailInvalid","isFormValid","handleInputChange","handleInputBlur","NewDepartment","formData","setFormData","departmentId","departmentName","alert","setAlert","formWasValidated","setFormWasValidated","references","email","formErrorTypes","Object","freeze","required","departmentIdLength","validEmail","formErrors","setFormErrors","messageTypes","failCaptcha","validators","e"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputField from '../../common/InputField/InputField';\nimport {\n  isFieldEmpty,\n  isEmailInvalid,\n  // isDepartmentIdValid,\n} from '../../../utils/validators';\nimport {\n  isFormValid,\n  handleInputChange,\n  handleInputBlur,\n} from '../../../utils/form-validation';\n\nconst NewDepartment = () => {\n  const [formData, setFormData] = useState({\n    departmentId: '',\n    departmentName: '',\n  });\n\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n\n  const references = {\n    email: useRef(),\n    departmentId: useRef(),\n  };\n\n  const formErrorTypes = Object.freeze({\n    required: `K√©rlek √≠rd ide az √°√©ltalad v√°lasztott √∫j azonos√≠t√≥dat`,\n    departmentIdLength: `The departmentIds needs to be at least 8 characters long`,\n    validEmail: `E-mail is not the right format`,\n  });\n\n  const [formErrors, setFormErrors] = useState({\n    email: '',\n    departmentId: '',\n  });\n\n  const messageTypes = Object.freeze({\n    failCaptcha: `Please prove me that you're not a robot ü§ñ`,\n  });\n\n  const validators = {\n    email: {\n      required: isFieldEmpty,\n      validEmail: isEmailInvalid,\n    },\n    departmentId: {\n      required: isFieldEmpty,\n      // departmentIsdLength: isdepartmentIdValid,\n    },\n  };\n\n  return (\n    <div className='container-sm mt-5'>\n      <h1>√öj szervezeti egys√©g hozz√°ad√°sa</h1>\n      <NavLink\n        className='navbar-item nav-link'\n        exact\n        to='/departments'\n        activeClassName='activeClicked'\n      >\n        <button type='button' class='btn btn-dark mt-5'>\n          Vissza\n        </button>{' '}\n      </NavLink>\n      <form\n        noValidate\n        // onSubmit={handleLogin}\n        className={`needs-validation ${formWasValidated && 'was-validated'}`}\n      >\n        <InputField\n          name='departmentId'\n          value={formData.departmentId}\n          labelText='Azonos√≠t√≥ *'\n          onChange={e => {\n            handleInputChange(e, formData, setFormData);\n          }}\n          onBlur={e => {\n            handleInputBlur(\n              e,\n              formData,\n              setFormErrors,\n              validators,\n              references,\n              formErrorTypes\n            );\n          }}\n          reference={references.departmentId}\n          error={formErrors.departmentId}\n          required\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default NewDepartment;\n"]},"metadata":{},"sourceType":"module"}