{"ast":null,"code":"var _jsxFileName = \"/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty, isIdFormatValid } from '../../../utils/validators';\nimport { isFormValid, handleInputChange, handleInputBlur } from '../../../utils/form-validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Employees = ({\n  employees\n}) => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    employee: ''\n  });\n  const [namesOfEmployees, setNamesOfEmployees] = useState([]);\n  const [idsOfEmployees, setIdsOfEmployees] = useState([]); // runs every time our employees state changes\n\n  useEffect(() => {\n    const fullNames = [];\n    const ids = [];\n\n    for (let i = 0; i < employees.length; i++) {\n      fullNames.push(employees[i].familyName + ' ' + employees[i].givenName);\n      ids.push(employees[i].employeeId);\n      setIdsOfEmployees(ids);\n      setNamesOfEmployees(fullNames);\n    }\n  }, [employees]);\n  console.log(namesOfEmployees);\n  console.log(idsOfEmployees); // let arrayOfNames = [];\n  // employees.map(employee => {\n  //   arrayOfNames.push(employee.familyName);\n  //   return arrayOfNames;\n  // });\n  // console.log(arrayOfNames);\n  // setNamesOfEmployees(arrayOfNames);\n\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n  const references = {\n    employee: useRef()\n  };\n  const [formErrors, setFormErrors] = useState({\n    employee: ''\n  });\n  const messageTypes = Object.freeze({\n    success: `Az adatok sikeresen mentésre kerültek`,\n    fail: `Az adatok mentése sikertelen`\n  });\n  const formErrorTypes = Object.freeze({\n    required: `A mező kitöltése kötelező`\n  });\n  const validators = {\n    employee: {\n      required: isFieldEmpty\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-sm mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dolgoz\\xF3k\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      exact: true,\n      to: \"/employees/new\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-dark mt-5\",\n        children: \"L\\xE9trehoz\\xE1s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      class: \"form-select\",\n      \"aria-label\": \"Default select example\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        selected: true,\n        children: \"Open this select menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: employee.familyName,\n        children: [employee.familyName, \" \", employee.givenName]\n      }, employee.familyName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-l mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger mt-5\",\n        children: \"T\\xF6rl\\xE9s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Employees, \"I40F5s4UAW/P9gKuPx4dGVML8hU=\");\n\n_c = Employees;\nexport default Employees;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employees\");","map":{"version":3,"sources":["/Users/tiborzavadovics/Programming/Interviews/employee-management-app/src/components/pages/Employees/Employees.js"],"names":["React","useState","useRef","useEffect","NavLink","InputFieldSet","isFieldEmpty","isIdFormatValid","isFormValid","handleInputChange","handleInputBlur","Employees","employees","formData","setFormData","employee","namesOfEmployees","setNamesOfEmployees","idsOfEmployees","setIdsOfEmployees","fullNames","ids","i","length","push","familyName","givenName","employeeId","console","log","alert","setAlert","formWasValidated","setFormWasValidated","references","formErrors","setFormErrors","messageTypes","Object","freeze","success","fail","formErrorTypes","required","validators","map"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport InputFieldSet from '../../common/InputFieldSet/InputFieldSet';\nimport { isFieldEmpty, isIdFormatValid } from '../../../utils/validators';\nimport {\n  isFormValid,\n  handleInputChange,\n  handleInputBlur,\n} from '../../../utils/form-validation';\n\nconst Employees = ({ employees }) => {\n  const [formData, setFormData] = useState({\n    employee: '',\n  });\n\n  const [namesOfEmployees, setNamesOfEmployees] = useState([]);\n  const [idsOfEmployees, setIdsOfEmployees] = useState([]);\n\n  // runs every time our employees state changes\n\n  useEffect(() => {\n    const fullNames = [];\n    const ids = [];\n    for (let i = 0; i < employees.length; i++) {\n      fullNames.push(employees[i].familyName + ' ' + employees[i].givenName);\n      ids.push(employees[i].employeeId);\n      setIdsOfEmployees(ids);\n      setNamesOfEmployees(fullNames);\n    }\n  }, [employees]);\n\n  console.log(namesOfEmployees);\n  console.log(idsOfEmployees);\n\n  // let arrayOfNames = [];\n\n  // employees.map(employee => {\n  //   arrayOfNames.push(employee.familyName);\n  //   return arrayOfNames;\n  // });\n\n  // console.log(arrayOfNames);\n  // setNamesOfEmployees(arrayOfNames);\n  const [alert, setAlert] = useState(null);\n  const [formWasValidated, setFormWasValidated] = useState(false);\n\n  const references = {\n    employee: useRef(),\n  };\n\n  const [formErrors, setFormErrors] = useState({\n    employee: '',\n  });\n\n  const messageTypes = Object.freeze({\n    success: `Az adatok sikeresen mentésre kerültek`,\n    fail: `Az adatok mentése sikertelen`,\n  });\n\n  const formErrorTypes = Object.freeze({\n    required: `A mező kitöltése kötelező`,\n  });\n\n  const validators = {\n    employee: {\n      required: isFieldEmpty,\n    },\n  };\n\n  return (\n    <div className='container-sm mt-5'>\n      <h1>Dolgozók</h1>\n      <NavLink exact to='/employees/new'>\n        <button type='button' className='btn btn-dark mt-5'>\n          Létrehozás\n        </button>{' '}\n      </NavLink>\n\n      {/* <InputFieldSet\n        name='employee'\n        value={formData.employee}\n        type='select'\n        options={namesOfEmployees}\n        onChange={e => {\n          handleInputChange(e, formData, setFormData);\n        }}\n        onBlur={e => {\n          handleInputBlur(\n            e,\n            formData,\n            setFormErrors,\n            validators,\n            references,\n            formErrorTypes\n          );\n        }}\n        reference={references.employee}\n        error={formErrors.employee}\n        required\n      /> */}\n      <select class='form-select' aria-label='Default select example'>\n        <option selected>Open this select menu</option>\n        {employees.map(employee => (\n          <option value={employee.familyName} key={employee.familyName}>\n            {employee.familyName} {employee.givenName}\n          </option>\n        ))}\n      </select>\n\n      <div className='container-l mt-5'>\n        {/* <NavLink to={`/employees/edit/${employeeId}`}>\n          <button type='button' className='btn btn-warning mt-5'>\n            Módosítás\n          </button>\n        </NavLink> */}\n        <button type='button' className='btn btn-danger mt-5'>\n          Törlés\n        </button>{' '}\n      </div>\n    </div>\n  );\n};\n\nexport default Employees;\n"]},"metadata":{},"sourceType":"module"}